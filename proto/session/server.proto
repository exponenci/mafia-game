syntax = "proto3";

service IServer {
    /* по имени и id клиента регистрируем его в нашем сервере */
    rpc ConnectClient(TPingRequest) returns (TPingResponse) {}

    rpc DisconnectClient(TPingRequest) returns (TPingResponse) {}

    rpc SubscribeForNotifications(TPingRequest) returns (stream TSystemNotification) {}

    // /* по id клиента получаем информацию про его сессию: 
    //     настройки сессии (кол-во игроков, мафии), статус (жив/мертв) и имена самих игроков*/
    // rpc GetSessionInfo(TGetSessionInfoRequest) returns (TGetSessionInfoResponse) {}

    // /*по настройкам сессии создается сессия - ей назначается id, 
    // клиент получает id сессии*/
    // rpc StartSession(TStartSessionRequest) returns (stream TStartSessionResponse) {}

    // /* добавить нового клиента в данную сессию 
    //   сервер уведомляет о новом участнике всем участникам сессии */
    // rpc AddMemberToSession(TAddMemberToSessionRequest) returns (stream TAddMemberToSessionResponse) {}

    // /* клиент подписывается на уведомления (новые участники+выбор игрока+голосование+тп) по id сессии*/
    // rpc SubscribeForNotifications(TSubscribeRequest) returns (stream TNotification) {}

    // /* 1 день: говорим о количестве игроков, желаем удачи
    //    ночь: 
    //     - мафия просыпается и голосует - сервер собирает голоса и убивает
    //     - комиссар просыпается и голосует - сервер отвечает кто мафия
    //    днем:
    //     - объявляем кто убит - сервер обновляет статусы игроков
    //     - мирные голосует и объявляем итоги - сервер собирает голоса и убивает одного */
    rpc RunGame(TSessionMoveRequest) returns (TSessionMoveResponse) {}
}

// message TRegisterClientRequest {
//     string username = 1;
// }

// message TRegisterClientResponse {
//     string message = 1; // either error message or ok message
// }

message TPingRequest {
    string username = 1;
}

message TPingResponse {
    string message = 1;
    // type: from core or session: first session -> sends session_id
}

message TSystemNotification {
    enum NotificationType {
        REGULAR_MESSAGE = 0;
        SESSION_INFO_MESSAGE = 1; // session & role
        TURN_INFO_MESSAGE = 2; // killed on prev turn & who's turn now & his vote options
    }
    enum Role {
        MAFIA_ROLE = 0;
        CITIZEN_ROLE = 1;
        COMMISSAR_ROLE = 2;
    }
    message SessionInfo {
        string session_id = 1;
        Role role = 2; 
        repeated string players = 3;
        optional string message = 4;
    }
    message TurnInfo {
        Role turn = 1; // mafia/citizen/commissar
        repeated string vote_options = 2;
        optional string target_username = 3;
        optional Role target_role = 4;
    }

    NotificationType type = 1;
    oneof data {
        string message = 2;
        SessionInfo session_info = 3;  
        TurnInfo turn_info = 4;
    }
}


// message TGetSessionInfoRequest {
//     string username = 1;
// }

// message TGetSessionInfoResponse {
//     string message = 1;
//     optional string session_id = 2;
//     optional int32 players_count = 3;
//     optional int32 mafia_count = 4;
//     repeated string clients = 5;

// }

// message TStartSessionRequest {
//     string username = 1;
//     int32 players_count = 2;
//     int32 mafia_count = 3;
// }

// enum Role {
//     Undefined = 0;
//     Mafia = 1;
//     Citizen = 2;
//     Commissar = 3;
// }

// message TStartSessionResponse {
//     string message = 1;
//     oneof response {
//         string session_id = 2;
//         Role role = 3;
//     }
// }

// message TAddMemberToSessionRequest {
//     string username = 1;
//     string session_id = 2;
// }

// message TAddMemberToSessionResponse {
//     string message = 1;
//     optional Role role = 2;
// }

// message TSubscribeRequest {
//     string username = 1;
//     string session_id = 2;    
// }

// message TNotification {
//     string notification = 1;
// }

message TSessionMoveRequest {
    string username = 1;
    string vote_for = 2;
    string session_id = 3;
}

message TSessionMoveResponse {
    string message = 1;
}